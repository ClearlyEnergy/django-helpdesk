# Generated by Django 3.2.18 on 2023-07-07 19:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('seed', '0218_alter_emailauth_exchange'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('helpdesk', '0083_rename_list_values_json_customfield_list_values'),
    ]

    operations = [
        migrations.AlterField(
            model_name='formtype',
            name='public',
            field=models.BooleanField(blank=True, default=True, help_text='Should this form be accessible by everyone?', verbose_name='Public?'),
        ),
        migrations.AlterField(
            model_name='formtype',
            name='queue',
            field=models.ForeignKey(blank=True, help_text='If a queue is selected, tickets will automatically be added to this queue when submitted. This option will hide the Queue field on the form.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='helpdesk.queue'),
        ),
        migrations.AlterField(
            model_name='formtype',
            name='unlisted',
            field=models.BooleanField(default=False, help_text='Should this form be hidden from the public form list? (If the "public" option is checked, this form will still be accessible by everyone through the link.)', verbose_name='Unlisted'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='forms',
            field=models.ManyToManyField(blank=True, help_text='The list of forms that visitors will be able to use to submit a ticket after reading an article in this category. (Only public forms will be displayed to public visitors, regardless of whether or not they are unlisted.)', to='helpdesk.FormType'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='name',
            field=models.CharField(help_text='This name is only used internally, and can be a descriptive name.', max_length=100, verbose_name='Category name'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='preview_description',
            field=models.TextField(blank=True, help_text='Optional short description that will describe the category on the Knowledgebase Overview page.', null=True, verbose_name='Short description'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='public',
            field=models.BooleanField(default=True, verbose_name='Is this category publicly visible?'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='queue',
            field=models.ForeignKey(blank=True, help_text='Set a default queue for tickets submitted after reading an article in this category.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='helpdesk.queue', verbose_name='Default queue for tickets'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='slug',
            field=models.SlugField(help_text='The slug is used in the URL, and cannot be changed once set. Only lowercase letters, numbers, and underscores are allowed.', unique=True, verbose_name='Slug'),
        ),
        migrations.AlterField(
            model_name='kbcategory',
            name='title',
            field=models.CharField(help_text='The title of the category that users will see.', max_length=100, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='kbitem',
            name='answer',
            field=models.TextField(help_text='The body of the article, or answer to the question.<br/><br/><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank">Markdown syntax</a> allowed, but no raw HTML. Examples: **bold**, *italic*, indent 4 spaces for a code block.<br/><br/><b>Multple newlines:</b><br/>Markdown doesn\'t recognize multiple blank lines. To display one, write &amp;nbsp; on a blank line.<br/><br/><b>Table formatting:</b><br/><pre>First Header  | Second Header</br>------------- | -------------</br>Content Cell  | Content Cell</br>Content Cell  | Content Cell</pre><b>Collapsing section:</b><br/> Add !~! on a line following the section title, followed by a blank line. Add ~!~ on a line following the section body, followed by another blank line. <br/>The body may have multiple lines of text, but no blank lines.<br/><br/>Example:<br/><pre>This text comes before the section.<br/><br/>Title of Subsection<br/>!~!<br/><br/>&amp;nbsp;<br/>Body of subsection.<br/>&amp;nbsp;<br/>I can add many lines of text to this. It will all be included in the section.<br/>~!~<br/><br/>&amp;nbsp;<br/>This, however, won\'t be included in the collapsing section.</pre>', verbose_name='Article body'),
        ),
        migrations.AlterField(
            model_name='kbitem',
            name='enabled',
            field=models.BooleanField(default=True, verbose_name='Is this article publicly visible?'),
        ),
        migrations.AlterField(
            model_name='kbitem',
            name='order',
            field=models.PositiveIntegerField(blank=True, help_text='Smaller numbers will be ordered first.', null=True, verbose_name='Ordering'),
        ),
        migrations.AlterField(
            model_name='kbitem',
            name='question',
            field=models.TextField(help_text="The article's title or 'question' that will be on the category page and at the top of the article page.", verbose_name='Question'),
        ),
        migrations.AlterField(
            model_name='kbitem',
            name='title',
            field=models.CharField(help_text="The title is the title of the article's webpage (in your browser's tab or window), and also in the 'breadcrumb trail' viewed above the question (example: Knowledgebase / Category Name / Article Title).", max_length=100, verbose_name='Title'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='allow_public_submission',
            field=models.BooleanField(blank=True, default=False, help_text='On forms where a default queue is not set, should this queue be listed as an option for visitors?', verbose_name='Allow visitors to select this queue?'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='dedicated_time',
            field=models.DurationField(blank=True, help_text="Time to be spent on this queue in total. Enter the time in seconds, or '0 00:00:00' format (day hour:minute:second).", null=True, verbose_name='Total dedicated time'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='default_owner',
            field=models.ForeignKey(blank=True, help_text='The default assigned owner of all tickets in this queue.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_owner', to=settings.AUTH_USER_MODEL, verbose_name='Default owner'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='enable_notifications_on_email_events',
            field=models.BooleanField(blank=True, default=True, help_text='When an email arrives to either create a ticket or to interact with an existing discussion, should email notifications be sent to non-Helpdesk participants? Note: the two fields for updating staff users work independently of this setting.', verbose_name='Notify contacts when email updates arrive?'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='escalate_days',
            field=models.IntegerField(blank=True, help_text='For tickets which are not on hold, how often do you wish to increase their priority? Set to 0 for no escalation.', null=True, verbose_name='Escalation days'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='importer',
            field=models.ForeignKey(blank=True, help_text='Emails are imported from this address into the queue.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='seed.emailimporter'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='match_on',
            field=models.JSONField(blank=True, default=list, help_text='When importing emails, emails will typically only go into one default queue.Add a word or phrase here to have emails containing that subject line to be routed into this queue instead.', verbose_name='Subject lines to import'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='match_on_addresses',
            field=models.JSONField(blank=True, default=list, help_text='Add an email address here to have all emails from that address to be routed into this queue during importing.', verbose_name='Email addresses to import'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='new_ticket_cc',
            field=models.CharField(blank=True, help_text='If an e-mail address is entered here, then it will receive notification of all new tickets created for this queue. Enter a comma between multiple e-mail addresses.', max_length=200, null=True, verbose_name='Users to notify when a new ticket is created'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='reassign_when_closed',
            field=models.BooleanField(default=False, help_text='When a ticket is closed, reassign the ticket to the default owner (if one is set).', verbose_name='Reassign to default owner when closed?'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='slug',
            field=models.SlugField(help_text="This slug is used in ticket ID's. Only lowercase letters, numbers, and underscoresare allowed. Shorter slugs preferred! Once set, the slug cannot be changed.", verbose_name='Slug'),
        ),
        migrations.AlterField(
            model_name='queue',
            name='updated_ticket_cc',
            field=models.CharField(blank=True, help_text='If an e-mail address is entered here, then it will receive notification of all activity (new tickets, closed tickets, updates, reassignments, etc) for this queue. Separate multiple addresses with a comma.', max_length=200, null=True, verbose_name='Users to notify when any update is made to a ticket'),
        ),
    ]
